{
	"id": "1fb7efaf04a14639f896e3568ef231e5",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/forwallet.sol": {
				"content": "pragma solidity 0.8.7;\n\ncontract forwallet { \n\n    struct wallet { \n        uint balance;\n        uint numPayments;\n    }\n\n    mapping(address => wallet) Wallets;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/* contract forwallet { \n\n    struct wallet { \n        uint balance;\n        uint numPayments;\n    }\n\n    mapping(address => wallet) Wallets;\n\n    function getTotalBalance() public view returns(uint) { \n        return address(this).balance; \n    }\n\n    function getBalance() public view returns(uint) { \n        return Wallets[msg.sender].balance;\n    }\n\n    function withdrawAllMoney(address payable _to) public {\n        uint _amount = Wallets[msg.sender].balance;\n        Wallets[msg.sender].balance = 0; \n        _to.transfer(_amount);\n    }\n\n    receive() external payable { \n        Wallets[msg.sender].balance += msg.value;\n        Wallets[msg.sender].numPayments += 1;\n    }\n}\n*/"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/forwallet.sol": {
				"forwallet": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/forwallet.sol\":24:164  contract forwallet { ... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/forwallet.sol\":24:164  contract forwallet { ... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122073e07d6be5022b0053c330fa9e0f086a23022341115e0d8a38483db611692b4864736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122073e07d6be5022b0053c330fa9e0f086a23022341115e0d8a38483db611692b4864736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0xE07D6BE5022B0053C330FA9E0F086A2302234111 0x5E 0xD DUP11 CODESIZE BASEFEE RETURNDATASIZE 0xB6 GT PUSH10 0x2B4864736F6C63430008 SMOD STOP CALLER ",
							"sourceMap": "24:140:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea264697066735822122073e07d6be5022b0053c330fa9e0f086a23022341115e0d8a38483db611692b4864736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0xE07D6BE5022B0053C330FA9E0F086A2302234111 0x5E 0xD DUP11 CODESIZE BASEFEE RETURNDATASIZE 0xB6 GT PUSH10 0x2B4864736F6C63430008 SMOD STOP CALLER ",
							"sourceMap": "24:140:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "66",
								"totalCost": "12666"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 24,
									"end": 164,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 24,
									"end": 164,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 24,
									"end": 164,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 24,
									"end": 164,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 24,
									"end": 164,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 24,
									"end": 164,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 24,
									"end": 164,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 24,
									"end": 164,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 24,
									"end": 164,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 24,
									"end": 164,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 24,
									"end": 164,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 24,
									"end": 164,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 24,
									"end": 164,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 24,
									"end": 164,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 24,
									"end": 164,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 24,
									"end": 164,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 24,
									"end": 164,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 24,
									"end": 164,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 24,
									"end": 164,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 24,
									"end": 164,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 24,
									"end": 164,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122073e07d6be5022b0053c330fa9e0f086a23022341115e0d8a38483db611692b4864736f6c63430008070033",
									".code": [
										{
											"begin": 24,
											"end": 164,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 24,
											"end": 164,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 24,
											"end": 164,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 24,
											"end": 164,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 24,
											"end": 164,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 24,
											"end": 164,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/forwallet.sol\":\"forwallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/forwallet.sol\":{\"keccak256\":\"0x469af7d6e7a9bb392496022eaa2955139783f03d99254b97dbb8209ac7f67dbc\",\"urls\":[\"bzz-raw://91c0be9f3ed4076bc711f61abcf6c7027aaee0976119657f8d1db6741fbdd5ba\",\"dweb:/ipfs/Qmdjf4cR7ZrAiZAExNbZrXvXauwYApbfUEwNzqPXHrPgLZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 11,
								"contract": "contracts/forwallet.sol:forwallet",
								"label": "Wallets",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_struct(wallet)6_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_struct(wallet)6_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct forwallet.wallet)",
								"numberOfBytes": "32",
								"value": "t_struct(wallet)6_storage"
							},
							"t_struct(wallet)6_storage": {
								"encoding": "inplace",
								"label": "struct forwallet.wallet",
								"members": [
									{
										"astId": 3,
										"contract": "contracts/forwallet.sol:forwallet",
										"label": "balance",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 5,
										"contract": "contracts/forwallet.sol:forwallet",
										"label": "numPayments",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/forwallet.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/forwallet.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/forwallet.sol": {
				"ast": {
					"absolutePath": "contracts/forwallet.sol",
					"exportedSymbols": {
						"forwallet": [
							12
						]
					},
					"id": 13,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".7"
							],
							"nodeType": "PragmaDirective",
							"src": "0:22:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 12,
							"linearizedBaseContracts": [
								12
							],
							"name": "forwallet",
							"nameLocation": "33:9:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "forwallet.wallet",
									"id": 6,
									"members": [
										{
											"constant": false,
											"id": 3,
											"mutability": "mutable",
											"name": "balance",
											"nameLocation": "81:7:0",
											"nodeType": "VariableDeclaration",
											"scope": 6,
											"src": "76:12:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "76:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 5,
											"mutability": "mutable",
											"name": "numPayments",
											"nameLocation": "103:11:0",
											"nodeType": "VariableDeclaration",
											"scope": 6,
											"src": "98:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 4,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "98:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "wallet",
									"nameLocation": "58:6:0",
									"nodeType": "StructDefinition",
									"scope": 12,
									"src": "51:70:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 11,
									"mutability": "mutable",
									"name": "Wallets",
									"nameLocation": "154:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 12,
									"src": "127:34:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_wallet_$6_storage_$",
										"typeString": "mapping(address => struct forwallet.wallet)"
									},
									"typeName": {
										"id": 10,
										"keyType": {
											"id": 7,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "135:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "127:26:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_wallet_$6_storage_$",
											"typeString": "mapping(address => struct forwallet.wallet)"
										},
										"valueType": {
											"id": 9,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 8,
												"name": "wallet",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 6,
												"src": "146:6:0"
											},
											"referencedDeclaration": 6,
											"src": "146:6:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_wallet_$6_storage_ptr",
												"typeString": "struct forwallet.wallet"
											}
										}
									},
									"visibility": "internal"
								}
							],
							"scope": 13,
							"src": "24:140:0",
							"usedErrors": []
						}
					],
					"src": "0:864:0"
				},
				"id": 0
			}
		}
	}
}